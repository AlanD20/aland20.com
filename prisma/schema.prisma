// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String
  strict String @unique

  projects Project[]
  skills   Skill[]
  @@map("tags")
}

model Project {
  id            Int     @id @default(autoincrement())
  title         String
  content       String
  priority      Int     @default(1)
  sourceLink    String  @map("source_link")
  previewLink   String  @map("preview_link")
  createdDate   String? @map("created_date")
  completedDate String? @map("completed_date")

  tags Tag[]
  @@map("projects")
}

model Faq {
  id       Int    @id @default(autoincrement())
  title    String
  priority Int    @default(1)
  content  String

  @@map("faqs")
}

model Skill {
  id       Int    @id @default(autoincrement())
  title    String @unique
  priority Int    @default(1)

  tags Tag[]

  @@map("skills")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
